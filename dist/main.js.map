{"version":3,"sources":["webpack://dinos-in-love/./src/assets.js","webpack://dinos-in-love/./src/entity.js","webpack://dinos-in-love/./src/game.js","webpack://dinos-in-love/./src/index.js","webpack://dinos-in-love/./src/input.js","webpack://dinos-in-love/./src/scene.js","webpack://dinos-in-love/./src/sprites.js","webpack://dinos-in-love/webpack/bootstrap","webpack://dinos-in-love/webpack/runtime/define property getters","webpack://dinos-in-love/webpack/runtime/hasOwnProperty shorthand","webpack://dinos-in-love/webpack/runtime/make namespace object","webpack://dinos-in-love/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,kFAAkF;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,2CAA2C,KAAK;AAC5D;AACA;;AAEA;AACA;;AAEA,wBAAwB,QAAQ;AAChC,4BAA4B,QAAQ;AACpC,0CAA0C,+BAA+B;AACzE;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACvDe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3DoC;AACR;AACE;AACoB;AACW;;AAEtD,qBAAqB,4CAAM;AAClC,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,iDAAW;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,4CAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAU;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,sBAAsB,OAAO;AAC5C;AACA;;AAEA;AACA,0BAA0B,oDAAe,EAAE,QAAQ,KAAK,wCAAwC;AAChG;AACA,0CAA0C,uBAAuB;AACjE,0CAA0C,6BAA6B;AACvE,yCAAyC,uBAAuB;AAChE,yCAAyC,wBAAwB;AACjE,oCAAoC,iBAAiB,gBAAgB,iBAAiB;AACtF,SAAS;AACT,KAAK;;AAEL,yBAAyB,oDAAe,EAAE,kCAAkC;;AAE5E,wBAAwB,4CAAM;AAC9B;AACA;AACA,4BAA4B,iDAAW;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,2CAAK;AAClC,8BAA8B;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,WAAW,6CAAS,2CAA2C;AAC/F,gCAAgC,WAAW,+CAAW,2CAA2C;AACjG;AACA,aAAa;AACb,kEAAkE,WAAW,gDAAY,8DAA8D;AACvJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,eAAe;AAC9C,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,uCAAuC;AACpF;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AClO8B;;AAE9B;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uCAAuC,YAAY;AACnD;;AAEA,sBAAsB,iDAAK,EAAE,OAAO;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;;;;;;ACnCM;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACpI8B;;AAEf,oBAAoB,4CAAM;AACzC,0BAA0B;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,sBAAsB;;AAE9E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACtDO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,sCAAsC;AACnD;AACA;AACA;;AAEO;AACP,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;UCvCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["export async function loadImage(name) {\n    let img = new Image();\n    img.src = './assets/' + name;\n    await img.decode();\n    return img;\n}\n\nexport class ImageAsset {\n    constructor({image, sx = 0, sy = 0, sw = null, sh = null, dx = 0, dy = 0, dw = null, dh = null}) {\n        this.image = image;\n        this.sx = sx;\n        this.sy = sy;\n        this.sw = sw ?? image.width;\n        this.sh = sh ?? image.height;\n        this.dx = dx;\n        this.dy = dy;\n        this.dw = dw ?? this.sw;\n        this.dh = dh ?? this.sh;\n    }\n\n    static async load({src, ...props}) {\n        let image = await loadImage(src);\n        return new ImageAsset({image, ...props});\n    }\n\n    frame({i = 0, j = 0, ...props}) {\n        return {\n            image: this.image,\n            sx: this.sx + i * this.sw,\n            sy: this.sy + j * this.sh,\n            sw: this.sw,\n            sh: this.sh,\n            dx: this.dx,\n            dy: this.dy,\n            dw: this.dw,\n            dh: this.dh,\n            ...props\n        };\n    }\n\n    frames({i = 0, j = 0, n = null, m = null, ...props} = {}) {\n        n ??= Math.floor(this.image.width / this.sw) - i;\n        m ??= Math.floor(this.image.height / this.sh) - j;\n\n        let result = Array(n * m);\n        let k = 0;\n\n        for (let ii = 0; ii < n; ++ii) {\n            for (let jj = 0; jj < m; ++jj) {\n                result[k++] = this.frame({i: i + ii, j: j + jj, ...props});\n            }\n        }\n\n        return result;\n    }\n}\n","export default class Entity {\n    constructor(props) {\n        this._parent = null;\n        this._children = new Set();\n\n        this.vx = 0;\n        this.vy = 0;\n        this.vrot = 0;\n\n        this.x = 0;\n        this.y = 0;\n        this.rot = 0;\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        Object.assign(this, props);\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    set parent(value) {\n        if (this._parent) {\n            this._parent._children.delete(this);\n        }\n        this._parent = value;\n        if (this._parent) {\n            this._parent._children.add(this);\n        }\n    }\n\n    get children() {\n        return this._children;\n    }\n\n    set children(value) {\n        for (let c of this._children) {\n            c._parent = null;\n        }\n        this._children = value;\n        for (let c of this._children) {\n            c._parent = this;\n        }\n    }\n\n    addChild(c) {\n        this._children.add(c);\n        c._parent = this;\n    }\n\n    removeChild(c) {\n        this._children.delete(c);\n        c._parent = null;\n    }\n\n    remove() {\n        this.parent = null;\n    }\n}\n","import {ImageAsset} from './assets';\nimport Scene from './scene';\nimport Entity from './entity';\nimport {ImageSprite, TextSprite} from './sprites';\nimport {ArrowsInput, WASDInput, GamepadInput} from './input';\n\nexport class Player extends Entity {\n    constructor(props = {}) {\n        super({\n            _state: null,\n            frozen: -1,\n            ...props\n        });\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    set state(value) {\n        if (this._state != value) {\n            this._state = value;\n            this.sprite = new ImageSprite(this.spriteSheet[this._state]);\n        }\n    }\n\n    update(dt) {\n        if (this.frozen > 0) {\n            this.frozen -= dt;\n            this.vx = 0;\n            this.vy = 0;\n            return;\n        }\n\n        this.vx = this.input.vx / 10;\n        this.vy = this.input.vy / 10;\n\n        if (this.vx > 0) {\n            this.scaleX = 1;\n        } else if (this.vx < 0) {\n            this.scaleX = -1;\n        }\n\n        let newState;\n\n        if (this.vx != 0 || this.vy != 0) {\n            newState = 'moving';\n        } else {\n            newState = 'waiting';\n        }\n\n        if (this.input.fast) {\n            newState += ' fast';\n        } else {\n            newState += ' slow';\n        }\n\n        this.state = newState;\n\n        /* border collision */\n        if (this.x <= 12) {\n            this.x = 12;\n            this.vx = Math.max(this.vx, 0);\n        }\n        if (this.y <= 16) {\n            this.y = 16;\n            this.vy = Math.max(this.vy, 0);\n        }\n\n        if (this.x >= 320 - 12) {\n            this.x = 320 - 12;\n            this.vx = Math.min(this.vx, 0);\n        }\n        if (this.y >= 240 - 4) {\n            this.y = 240 - 4;\n            this.vy = Math.min(this.vy, 0);\n        }\n    }\n}\n\nclass StartText extends Entity {\n    constructor(props) {\n        super({\n            _timer: 1000,\n            alpha: 1.0,\n            x: 160,\n            y: 50,\n            vy: -1/50,\n            rot: -20,\n            vrot: 1/20,\n            sprite: new TextSprite({\n                textAlign: 'center',\n                textBaseline: 'middle',\n                text: 'START'\n            }),\n            ...props\n        });\n    }\n\n    update(dt) {\n        this._timer -= dt;\n        if (this._timer <= 0) {\n            this.remove();\n            return;\n        }\n\n        this.scaleX += dt / 1000;\n        this.scaleY += dt / 1000;\n        this.alpha -= dt / 1000;\n    }\n}\n\nexport default async function start({canvas}) {\n    canvas.width = 320;\n    canvas.height = 240;\n\n    let images = Object.fromEntries(await Promise.all(['doux', 'mort', 'tard', 'vita'].map(async (name, i) => {\n        let image = await ImageAsset.load({src: `${name}.png`, sw: 24, sh: 24, dx: -11, dy: -20});\n        return [i, {\n            'waiting slow': image.frames({i: 0, n: 3, delay: 200}),\n            'waiting fast': image.frames({i: 17, n: 1, delay: Infinity}),\n            'moving slow': image.frames({i: 4, n: 6, delay: 100}),\n            'moving fast': image.frames({i: 18, n: 6, delay: 100}),\n            'frozen': [image.frame({i: 14, delay: 50}), image.frame({i: 16, delay: 50})]\n        }];\n    })));\n\n    images.heart = await ImageAsset.load({src: 'heart.png', dx: -8, dy: -16}).then(i => i.frames());\n\n    class Heart extends Entity {\n        constructor(props) {\n            super({\n                sprite: new ImageSprite(images.heart),\n                timer: 1000,\n                alpha: 1.0,\n                vy: -1/100,\n                ...props\n            });\n        }\n\n        update(dt) {\n            this.timer -= dt;\n            if (this.timer <= 0) {\n                this.remove();\n                return;\n            }\n\n            this.scaleX += dt / 1000;\n            this.scaleY += dt / 1000;\n            this.alpha -= dt / 1000;\n        }\n    }\n\n    return new class extends Scene {\n        constructor(props = {}) {\n            super(props);\n\n            this.players = [];\n            this._listener = () => this.resetPlayers();\n\n            window.addEventListener('gamepadconnected', this._listener);\n            window.addEventListener('gamepaddisconnected', this._listener);\n            this.resetPlayers();\n        }\n\n        close() {\n            window.removeEventListener('gamepadconnected', this._listener);\n            window.removeEventListener('gamepaddisconnected', this._listener);\n        }\n\n        resetPlayers() {\n            this.players.forEach(p => p.remove());\n\n            let gamepads = navigator.getGamepads();\n            if (gamepads.length == 0) {\n                this.players = [\n                    new Player({input: new WASDInput(), x: 100, y: 100, spriteSheet: images[0]}),\n                    new Player({input: new ArrowsInput(), x: 200, y: 200, spriteSheet: images[1]})\n                ];\n            } else {\n                this.players = gamepads.map((g, i) => new Player({input: new GamepadInput(g), x: 100 + 50 * i, y: 100 + 50 * i, spriteSheet: images[i]}));\n            }\n\n            this.players.forEach(p => this.addChild(p));\n\n            this.addChild(new StartText());\n        }\n\n        update(dt) {\n            function *pairs(ps) {\n                for (let i = 0; i < ps.length; ++i) {\n                    for (let j = i + 1; j < ps.length; ++j) {\n                        yield [ps[i], ps[j]];\n                    }\n                }\n            }\n\n            for (let [p1, p2] of pairs(this.players)) {\n                if (p1.frozen > 0 || p2.frozen > 0) continue;\n\n                let d = ((p1.x - p2.x) / 24) ** 2 + ((p1.y - p2.y) / 8) ** 2;\n\n                if (d < 1) {\n                    p1.frozen = 500;\n                    p2.frozen = 500;\n\n                    p1.state = 'frozen';\n                    p2.state = 'frozen';\n\n                    if (p1.x < p2.x) {\n                        p1.x -= 5;\n                        p2.x += 5;\n                        p1.scaleX = 1;\n                        p2.scaleX = -1;\n                    } else {\n                        p1.x += 5;\n                        p2.x -= 5;\n                        p1.scaleX = -1;\n                        p2.scaleX = 1;\n                    }\n\n                    this.addChild(new Heart({x: (p1.x + p2.x)/2, y: (p1.y + p2.y)/2}));\n                }\n            }\n        }\n    };\n}","import start from './game.js';\n\nfunction animate(g) {\n    let t0 = performance.now();\n\n    function frame(t1) {\n        let dt = t1 - t0;\n        t0 = t1;\n\n        let {done} = g.next(dt);\n        if (!done) {\n            requestAnimationFrame(frame);\n        }\n    }\n\n    requestAnimationFrame(frame);\n}\n\nwindow.addEventListener('load', async () => {\n    let canvas = document.getElementById('main-canvas');\n    let ctx = canvas.getContext('2d', {alpha: true});\n    ctx.imageSmoothingEnabled = false;\n\n    let scene = await start({canvas});\n\n    function* main() {\n        while (true) {\n            let dt = yield;\n\n            scene.updateAll(dt);\n            scene.drawAll(ctx, canvas);\n        }\n    }\n\n    animate(main());\n})\n","export class ArrowsInput {\n    constructor() {\n        this._keys = {};\n        this._listener = (e) => this._keys[e.key] = (e.type == 'keydown');\n        window.addEventListener('keyup', this._listener);\n        window.addEventListener('keydown', this._listener);\n    }\n\n    close() {\n        window.removeEventListener('keyup', this._listener);\n        window.removeEventListener('keydown', this._listener);\n    }\n\n    get fast() {\n        return this._keys.Shift;\n    }\n\n    get vx() {\n        let value = 0;\n\n        if (this._keys.ArrowLeft) {\n            value -= 1;\n        }\n\n        if (this._keys.ArrowRight) {\n            value += 1;\n        }\n\n        if (this.fast) {\n            value *= 1.5;\n        } else {\n            value *= 0.5;\n        }\n\n        return value;\n    }\n\n    get vy() {\n        let value = 0;\n\n        if (this._keys.ArrowUp) {\n            value -= 1;\n        }\n\n        if (this._keys.ArrowDown) {\n            value += 1;\n        }\n\n        if (this.fast) {\n            value *= 1.5;\n        } else {\n            value *= 0.5;\n        }\n\n        return value;\n    }\n}\n\nexport class WASDInput {\n    constructor() {\n        this._keys = {};\n        this._listener = (e) => this._keys[e.key] = (e.type == 'keydown');\n        window.addEventListener('keyup', this._listener);\n        window.addEventListener('keydown', this._listener);\n    }\n\n    close() {\n        window.removeEventListener('keyup', this._listener);\n        window.removeEventListener('keydown', this._listener);\n    }\n\n    get fast() {\n        return this._keys.f;\n    }\n\n    get vx() {\n        let value = 0;\n\n        if (this._keys.a) {\n            value -= 1;\n        }\n\n        if (this._keys.d) {\n            value += 1;\n        }\n\n        if (this.fast) {\n            value *= 1.5;\n        } else {\n            value *= 0.5;\n        }\n\n        return value;\n    }\n\n    get vy() {\n        let value = 0;\n\n        if (this._keys.w) {\n            value -= 1;\n        }\n\n        if (this._keys.s) {\n            value += 1;\n        }\n\n        if (this.fast) {\n            value *= 1.5;\n        } else {\n            value *= 0.5;\n        }\n\n        return value;\n    }\n}\n\nexport class GamepadInput {\n    constructor(gamepad) {\n        this._gamepad = gamepad;\n    }\n\n    get fast() {\n        return this._gamepad.buttons[0].pressed;\n    }\n\n    get vx() {\n        return this._gamepad.axes[0] * (this.fast ? 1.5 : 0.5);\n    }\n\n    get vy() {\n        return this._gamepad.axes[1] * (this.fast ? 1.5 : 0.5);\n    }\n}","import Entity from './entity';\n\nexport default class Scene extends Entity {\n    constructor(props = {}) {\n        super(props);\n    }\n\n    updateAll(dt) {\n        this._renderList = [];\n\n        let walk = (node) => {\n            node.update?.(dt);\n\n            node.x += node.vx * dt;\n            node.y += node.vy * dt;\n            node.rot += node.vrot * dt;\n\n            if (node.parent) {\n                node._matrix = DOMMatrix.fromMatrix(node.parent._matrix);\n            } else {\n                node._matrix = new DOMMatrix();\n            }\n\n            node._matrix.translateSelf(Math.round(node.x), Math.round(node.y));\n            node._matrix.rotateSelf(0, 0, node.rot);\n            node._matrix.scaleSelf(node.scaleX, node.scaleY);\n            node._anchor = node._matrix.transformPoint({x: 0, y: 0, z: node.z});\n\n            if (node.sprite) {\n                node.sprite.update?.(dt);\n                this._renderList.push(node);\n            }\n\n            // TODO: pre-calculate global transformation here?\n            // TODO: collision detection\n            node.children.forEach(walk);\n        };\n\n        walk(this);\n    }\n\n    drawAll(ctx, canvas) {\n        this._renderList.sort((node1, node2) => (node1._anchor.z - node2._anchor.z) || (node1._anchor.y - node2._anchor.y));\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        for (let node of this._renderList) {\n            ctx.save();\n            ctx.transform(node._matrix.a, node._matrix.b, node._matrix.c, node._matrix.d, node._matrix.e, node._matrix.f);\n            ctx.globalAlpha = node.alpha;\n            node.sprite.draw(ctx, canvas);\n            ctx.globalAlpha = 1;\n            ctx.restore();\n        }\n    }\n}","export class ImageSprite {\n    constructor(frames = []) {\n        this._frames = frames;\n        this._frameDelay = 0;\n        this._frameIndex = -1;\n    }\n\n    update(dt) {\n        this._frameDelay -= dt;\n        if (this._frameDelay <= 0) {\n            this._frameIndex = (this._frameIndex + 1) % this._frames.length;\n            this._frameDelay = this._frames[this._frameIndex].delay;\n        }\n    }\n\n    draw(ctx) {\n        let {image, sx, sy, sw, sh, dx, dy, dw, dh} = this._frames[this._frameIndex];\n        ctx.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n}\n\nexport class TextSprite {\n    constructor(props = {}) {\n        this.textAlign = props.textAlign ?? 'left';\n        this.textBaseline = props.textBaseline ?? 'alphabetic';\n        this.fillStyle = props.fillStyle ?? 'white';\n        this.font = props.font ?? '8px sans-serif';\n        this.x = props.x ?? 0;\n        this.y = props.y ?? 0;\n        this.text = props.text ?? '';\n    }\n\n    draw(ctx) {\n        ctx.textAlign = this.textAlign;\n        ctx.textBaseline = this.textBaseline;\n        ctx.fillStyle = this.fillStyle;\n        ctx.font = this.font;\n        ctx.fillText(this.text, this.x, this.y);\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}